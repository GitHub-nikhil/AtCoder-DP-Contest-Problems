#include <iostream>
#include <algorithm>
#include <math.h>
#include <cstring>
using namespace std;
#define ll long long int 
//Top-Down Approach
//ll n,W;
//ll weight[110];
//ll value[110];
//ll knapsack(int n,int W){
//    ll dp[n+1][W+1];
//    for(int i = 0;i<=n;i++){
//        for(int j = 0;j<=W;j++){
//            if(i == 0) dp[i][j] = 0;
//            if(j == 0) dp[i][j] = 0;
//            }
//        }
//        for(int i = 1;i<=n;i++){
//            for(int j = 1;j<=W;j++){
//                if(weight[i]<=j){
//                    dp[i][j] = max(value[i]+dp[i-1][j-weight[i]],dp[i-1][j]);
//                    }
//                    else{
//                        dp[i][j] = dp[i-1][j];
//                        }
//                }
//            }
//            return dp[n][W];
//    }

//Memoization
ll n,W;
ll weight[110];
ll value[110];
ll dp[110][100010];
ll knapsack(ll curr,ll n,ll W){
    if(curr == n+1) return 0;
    if(dp[curr][W]!=-1) return dp[curr][W];
    if(weight[curr]<=W){
        return dp[curr][W] = max(value[curr]+knapsack(curr+1,n,W-weight[curr]),knapsack(curr+1,n,W));
        }
    else{
        return dp[curr][W] = knapsack(curr+1,n,W);
        }
    }
int main(){
    cin>>n>>W;
    for(int i = 1;i<=n;i++){
        cin>>weight[i];
        cin>>value[i];
        }
        memset(dp,-1,sizeof dp);
        ll ans = knapsack(1,n,W);
        cout<<ans<<endl;
        
        return 0;
    }
